.. _isosample:

IsoSample
=========

The IsoSample (short for isotropic sample) object consists of the methods and class adjustments necessary for
generating the isotropic sample used in phasematching_calc.  

In summary, the user builds a sample from Layers and defines a overall name for the sample.  This IsoSample can
be saved to disk and reloaded at user convenience.

See Layer(below) for information on the Layers subclass.

Public class methods are:

`loadlayer(self, csvfile, thickness, label="")`
-------------------------
Given a tab-delmited file on disk, the method loads the layer into memory as appended to the layers already
generated in the sample.  This layer is always added at the END, meaning the inputs pass through all layers prior
to this one.   A method reordering of layers was not deemed necessary, the user can simply loadlayers from scratch to put
them in proper order.  This also includes thickness changes.

The tab-delimited file must be in the order of columns (w,a,n) where w is the frequency in (cm-1), a is 
the absorption coefficient in cm-1, and n is the real refractive index.  The rows must be arranged in ascending 
order.

User then specifies thickness of the layer in cm.


`save(self, file)`
-----------------
Once an IsoSample object is initialized, any methods can be applied to it.  It can then be saved as a JSON
to disk (thus requiring write permissions to the path).


`load(self, file)`
-----------------
This method loads data from a JSON file and modifies the currently established object with the information found.


Other exposed methods are available but have limited use, are short, and are self-explanatory.



Layer
=====
The Layer object consists of a description, a layer thickness in cm, a set of `w_points`, `a_points`, and `n_points`,
and layer methods. Only two methods are mentioned:

`estimate(self, freq)`
----------------------
For a Layer, estimate the absorbance and refractive index using linear interpolation between datapoints
found in the table generated by `loadlayer`.   

The tuple returned is 
`(w,a,n)` :  `w` is just the returned frequency `freq`, `a` is the absorption coefficient (cm-1), `n` is the
real refractive index.    User may wish to validate the method works properly so they make forked repositories
that calculate this estimate based on other methods such as splines.


`suppressabs(self)`
------------------
Sets the `a_points` to 0, which can be useful for optimizing M factor calculations that do not wish to see
non-zero absorption.  No methods are created to revert to the original values. 





